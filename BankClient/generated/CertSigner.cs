// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `CertSigner.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;
using _Microsoft = global::Microsoft;

#pragma warning disable 1591

namespace IceCompactId
{
}

namespace SR
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class DataTooLong : Ice.UserException
    {
        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public DataTooLong()
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public DataTooLong(_System.Exception ex__) : base(ex__)
        {
        }

        #endregion

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public override string ice_name()
        {
            return "SR::DataTooLong";
        }

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public override int GetHashCode()
        {
            int h__ = 5381;
            IceInternal.HashUtil.hashAdd(ref h__, "::SR::DataTooLong");
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public override bool Equals(object other__)
        {
            if(other__ == null)
            {
                return false;
            }
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            DataTooLong o__ = other__ as DataTooLong;
            if(o__ == null)
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public static bool operator==(DataTooLong lhs__, DataTooLong rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public static bool operator!=(DataTooLong lhs__, DataTooLong rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshaling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        protected override void writeImpl__(IceInternal.BasicStream os__)
        {
            os__.startWriteSlice("::SR::DataTooLong", -1, true);
            os__.endWriteSlice();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        protected override void readImpl__(IceInternal.BasicStream is__)
        {
            is__.startReadSlice();
            is__.endReadSlice();
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class IncorrectCSRFile : Ice.UserException
    {
        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public IncorrectCSRFile()
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public IncorrectCSRFile(_System.Exception ex__) : base(ex__)
        {
        }

        #endregion

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public override string ice_name()
        {
            return "SR::IncorrectCSRFile";
        }

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public override int GetHashCode()
        {
            int h__ = 5381;
            IceInternal.HashUtil.hashAdd(ref h__, "::SR::IncorrectCSRFile");
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public override bool Equals(object other__)
        {
            if(other__ == null)
            {
                return false;
            }
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            IncorrectCSRFile o__ = other__ as IncorrectCSRFile;
            if(o__ == null)
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public static bool operator==(IncorrectCSRFile lhs__, IncorrectCSRFile rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public static bool operator!=(IncorrectCSRFile lhs__, IncorrectCSRFile rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshaling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        protected override void writeImpl__(IceInternal.BasicStream os__)
        {
            os__.startWriteSlice("::SR::IncorrectCSRFile", -1, true);
            os__.endWriteSlice();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        protected override void readImpl__(IceInternal.BasicStream is__)
        {
            is__.startReadSlice();
            is__.endReadSlice();
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class IncorrectName : Ice.UserException
    {
        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public IncorrectName()
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public IncorrectName(_System.Exception ex__) : base(ex__)
        {
        }

        #endregion

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public override string ice_name()
        {
            return "SR::IncorrectName";
        }

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public override int GetHashCode()
        {
            int h__ = 5381;
            IceInternal.HashUtil.hashAdd(ref h__, "::SR::IncorrectName");
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public override bool Equals(object other__)
        {
            if(other__ == null)
            {
                return false;
            }
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            IncorrectName o__ = other__ as IncorrectName;
            if(o__ == null)
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public static bool operator==(IncorrectName lhs__, IncorrectName rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        public static bool operator!=(IncorrectName lhs__, IncorrectName rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshaling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        protected override void writeImpl__(IceInternal.BasicStream os__)
        {
            os__.startWriteSlice("::SR::IncorrectName", -1, true);
            os__.endWriteSlice();
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
        protected override void readImpl__(IceInternal.BasicStream is__)
        {
            is__.startReadSlice();
            is__.endReadSlice();
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface CertSigner : Ice.Object, CertSignerOperations_, CertSignerOperationsNC_
    {
    }
}

namespace SR
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public delegate void Callback_CertSigner_signCSR(byte[] ret__);
}

namespace SR
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public interface CertSignerPrx : Ice.ObjectPrx
    {
        byte[] signCSR(string name, string surname, byte[] csrFile);
        byte[] signCSR(string name, string surname, byte[] csrFile, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<SR.Callback_CertSigner_signCSR> begin_signCSR(string name, string surname, byte[] csrFile);
        Ice.AsyncResult<SR.Callback_CertSigner_signCSR> begin_signCSR(string name, string surname, byte[] csrFile, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_signCSR(string name, string surname, byte[] csrFile, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_signCSR(string name, string surname, byte[] csrFile, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        byte[] end_signCSR(Ice.AsyncResult r__);
    }
}

namespace SR
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public interface CertSignerOperations_
    {
        byte[] signCSR(string name, string surname, byte[] csrFile, Ice.Current current__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public interface CertSignerOperationsNC_
    {
        byte[] signCSR(string name, string surname, byte[] csrFile);
    }
}

namespace SR
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public sealed class CertSignerPrxHelper : Ice.ObjectPrxHelperBase, CertSignerPrx
    {
        #region Synchronous operations

        public byte[] signCSR(string name, string surname, byte[] csrFile)
        {
            return signCSR(name, surname, csrFile, null, false);
        }

        public byte[] signCSR(string name, string surname, byte[] csrFile, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return signCSR(name, surname, csrFile, context__, true);
        }

        private byte[] signCSR(string name, string surname, byte[] csrFile, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            Ice.Instrumentation.InvocationObserver observer__ = IceInternal.ObserverHelper.get(this, __signCSR_name, context__);
            int cnt__ = 0;
            try
            {
                while(true)
                {
                    Ice.ObjectDel_ delBase__ = null;
                    try
                    {
                        checkTwowayOnly__(__signCSR_name);
                        delBase__ = getDelegate__(false);
                        CertSignerDel_ del__ = (CertSignerDel_)delBase__;
                        return del__.signCSR(name, surname, csrFile, context__, observer__);
                    }
                    catch(IceInternal.LocalExceptionWrapper ex__)
                    {
                        handleExceptionWrapper__(delBase__, ex__, observer__);
                    }
                    catch(Ice.LocalException ex__)
                    {
                        handleException__(delBase__, ex__, true, ref cnt__, observer__);
                    }
                }
            }
            finally
            {
                if(observer__ != null)
                {
                    observer__.detach();
                }
            }
        }

        #endregion

        #region Asynchronous operations

        public Ice.AsyncResult<SR.Callback_CertSigner_signCSR> begin_signCSR(string name, string surname, byte[] csrFile)
        {
            return begin_signCSR(name, surname, csrFile, null, false, null, null);
        }

        public Ice.AsyncResult<SR.Callback_CertSigner_signCSR> begin_signCSR(string name, string surname, byte[] csrFile, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_signCSR(name, surname, csrFile, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_signCSR(string name, string surname, byte[] csrFile, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_signCSR(name, surname, csrFile, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_signCSR(string name, string surname, byte[] csrFile, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_signCSR(name, surname, csrFile, ctx__, true, cb__, cookie__);
        }

        private const string __signCSR_name = "signCSR";

        public byte[] end_signCSR(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __signCSR_name);
            bool ok__ = outAsync__.wait__();
            try
            {
                if(!ok__)
                {
                    try
                    {
                        outAsync__.throwUserException__();
                    }
                    catch(SR.DataTooLong)
                    {
                        throw;
                    }
                    catch(SR.IncorrectCSRFile)
                    {
                        throw;
                    }
                    catch(Ice.UserException ex__)
                    {
                        throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                    }
                }
                byte[] ret__;
                IceInternal.BasicStream is__ = outAsync__.startReadParams__();
                ret__ = Ice.ByteSeqHelper.read(is__);
                outAsync__.endReadParams__();
                return ret__;
            }
            catch(Ice.LocalException ex)
            {
                Ice.Instrumentation.InvocationObserver obsv__ = outAsync__.getObserver__();
                if(obsv__ != null)
                {
                    obsv__.failed(ex.ice_name());
                }
                throw ex;
            }
        }

        private Ice.AsyncResult<SR.Callback_CertSigner_signCSR> begin_signCSR(string name, string surname, byte[] csrFile, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__signCSR_name);
            IceInternal.TwowayOutgoingAsync<SR.Callback_CertSigner_signCSR> result__ =  new IceInternal.TwowayOutgoingAsync<SR.Callback_CertSigner_signCSR>(this, __signCSR_name, signCSR_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__signCSR_name, Ice.OperationMode.Normal, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.startWriteParams__(Ice.FormatType.DefaultFormat);
                os__.writeString(name);
                os__.writeString(surname);
                Ice.ByteSeqHelper.write(os__, csrFile);
                result__.endWriteParams__();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void signCSR_completed__(Ice.AsyncResult r__, SR.Callback_CertSigner_signCSR cb__, Ice.ExceptionCallback excb__)
        {
            byte[] ret__;
            try
            {
                ret__ = end_signCSR(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        #endregion

        #region Checked and unchecked cast operations

        public static CertSignerPrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            CertSignerPrx r = b as CertSignerPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                CertSignerPrxHelper h = new CertSignerPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static CertSignerPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            CertSignerPrx r = b as CertSignerPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                CertSignerPrxHelper h = new CertSignerPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static CertSignerPrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    CertSignerPrxHelper h = new CertSignerPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static CertSignerPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    CertSignerPrxHelper h = new CertSignerPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static CertSignerPrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            CertSignerPrx r = b as CertSignerPrx;
            if(r == null)
            {
                CertSignerPrxHelper h = new CertSignerPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static CertSignerPrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            CertSignerPrxHelper h = new CertSignerPrxHelper();
            h.copyFrom__(bb);
            return h;
        }

        public static readonly string[] ids__ =
        {
            "::Ice::Object",
            "::SR::CertSigner"
        };

        public static string ice_staticId()
        {
            return ids__[1];
        }

        #endregion

        #region Marshaling support

        protected override Ice.ObjectDelM_ createDelegateM__()
        {
            return new CertSignerDelM_();
        }

        protected override Ice.ObjectDelD_ createDelegateD__()
        {
            return new CertSignerDelD_();
        }

        public static void write__(IceInternal.BasicStream os__, CertSignerPrx v__)
        {
            os__.writeProxy(v__);
        }

        public static CertSignerPrx read__(IceInternal.BasicStream is__)
        {
            Ice.ObjectPrx proxy = is__.readProxy();
            if(proxy != null)
            {
                CertSignerPrxHelper result = new CertSignerPrxHelper();
                result.copyFrom__(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace SR
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public interface CertSignerDel_ : Ice.ObjectDel_
    {
        byte[] signCSR(string name, string surname, byte[] csrFile, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__);
    }
}

namespace SR
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public sealed class CertSignerDelM_ : Ice.ObjectDelM_, CertSignerDel_
    {
        public byte[] signCSR(string name, string surname, byte[] csrFile, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("signCSR", Ice.OperationMode.Normal, context__, observer__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.startWriteParams(Ice.FormatType.DefaultFormat);
                    os__.writeString(name);
                    os__.writeString(surname);
                    Ice.ByteSeqHelper.write(os__, csrFile);
                    og__.endWriteParams();
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(SR.DataTooLong)
                        {
                            throw;
                        }
                        catch(SR.IncorrectCSRFile)
                        {
                            throw;
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.startReadParams();
                    byte[] ret__;
                    ret__ = Ice.ByteSeqHelper.read(is__);
                    og__.endReadParams();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }
    }
}

namespace SR
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public sealed class CertSignerDelD_ : Ice.ObjectDelD_, CertSignerDel_
    {
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public byte[] signCSR(string name, string surname, byte[] csrFile, _System.Collections.Generic.Dictionary<string, string> context__, Ice.Instrumentation.InvocationObserver observer__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "signCSR", Ice.OperationMode.Normal, context__);
            byte[] result__ = null;
            Ice.UserException userException__ = null;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                CertSigner servant__ = null;
                try
                {
                    servant__ = (CertSigner)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                try
                {
                    result__ = servant__.signCSR(name, surname, csrFile, current__);
                    return Ice.DispatchStatus.DispatchOK;
                }
                catch(Ice.UserException ex__)
                {
                    userException__ = ex__;
                    return Ice.DispatchStatus.DispatchUserException;
                }
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.getServant().collocDispatch__(direct__);
                    if(status__ == Ice.DispatchStatus.DispatchUserException)
                    {
                        throw userException__;
                    }
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(SR.DataTooLong)
            {
                throw;
            }
            catch(SR.IncorrectCSRFile)
            {
                throw;
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }
    }
}

namespace SR
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.5.1")]
    public abstract class CertSignerDisp_ : Ice.ObjectImpl, CertSigner
    {
        #region Slice operations

        public byte[] signCSR(string name, string surname, byte[] csrFile)
        {
            return signCSR(name, surname, csrFile, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract byte[] signCSR(string name, string surname, byte[] csrFile, Ice.Current current__);

        #endregion

        #region Slice type-related members

        public static new readonly string[] ids__ = 
        {
            "::Ice::Object",
            "::SR::CertSigner"
        };

        public override bool ice_isA(string s)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override bool ice_isA(string s, Ice.Current current__)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids()
        {
            return ids__;
        }

        public override string[] ice_ids(Ice.Current current__)
        {
            return ids__;
        }

        public override string ice_id()
        {
            return ids__[1];
        }

        public override string ice_id(Ice.Current current__)
        {
            return ids__[1];
        }

        public static new string ice_staticId()
        {
            return ids__[1];
        }

        #endregion

        #region Operation dispatch

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus signCSR___(CertSigner obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Normal, current__.mode);
            IceInternal.BasicStream is__ = inS__.startReadParams();
            string name;
            string surname;
            byte[] csrFile;
            name = is__.readString();
            surname = is__.readString();
            csrFile = Ice.ByteSeqHelper.read(is__);
            inS__.endReadParams();
            try
            {
                byte[] ret__ = obj__.signCSR(name, surname, csrFile, current__);
                IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
                Ice.ByteSeqHelper.write(os__, ret__);
                inS__.endWriteParams__(true);
                return Ice.DispatchStatus.DispatchOK;
            }
            catch(SR.DataTooLong ex__)
            {
                inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                return Ice.DispatchStatus.DispatchUserException;
            }
            catch(SR.IncorrectCSRFile ex__)
            {
                inS__.writeUserException__(ex__, Ice.FormatType.DefaultFormat);
                return Ice.DispatchStatus.DispatchUserException;
            }
        }

        private static string[] all__ =
        {
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "signCSR"
        };

        public override Ice.DispatchStatus dispatch__(IceInternal.Incoming inS__, Ice.Current current__)
        {
            int pos = _System.Array.BinarySearch(all__, current__.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return ice_id___(this, inS__, current__);
                }
                case 1:
                {
                    return ice_ids___(this, inS__, current__);
                }
                case 2:
                {
                    return ice_isA___(this, inS__, current__);
                }
                case 3:
                {
                    return ice_ping___(this, inS__, current__);
                }
                case 4:
                {
                    return signCSR___(this, inS__, current__);
                }
            }

            _System.Diagnostics.Debug.Assert(false);
            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
        }

        #endregion

        #region Marshaling support

        protected override void writeImpl__(IceInternal.BasicStream os__)
        {
            os__.startWriteSlice(ice_staticId(), -1, true);
            os__.endWriteSlice();
        }

        protected override void readImpl__(IceInternal.BasicStream is__)
        {
            is__.startReadSlice();
            is__.endReadSlice();
        }

        #endregion
    }
}
